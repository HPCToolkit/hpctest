#=================================================#
# AMG2013 PACKAGE FILE TO BE GENERATED BY HPCTEST #
#=================================================#


# from info.name, info.description, and build.kind
from spack import *
class Amg2006(MakefilePackage):
    """AMG2006 is a parallel algebraic multigrid solver for linear systems arising
    from problems on unstructured grids. 
    """

# from info.homepage and info.url
    homepage = "https://svn.mcs.anl.gov/repos/performance/benchmarks/AMG2006"
    url      = "https://github.com/HPCToolkit/HPCTest"

# from info.version
    version('1.0', 'app/AMG2006')

# from config.variants[@openmp].{variant,description}, and config.'default variants'
    variant('openmp', description='Build with OpenMP support', default=True)

# from config.variants[@mpi].{variant,description,depends}, and config.'default variants'
    variant('mpi', description='Build with MPI support', default=True)
    depends_on('mpi', when='+mpi')

# boilerplate for config.variants[*].flags...
    @property
    def build_targets(self):
        targets = []
        
## from config.variants[@base].languages
##    languages: [ cxx ]
        languages = 'CC = {}'.format(spack_cc)
        
## from config.variants[@base].flags
##      CXXFLAGS: "-g -O3"
        cxxflags = '-g -O2'
        ldflags = '-lm'
        
## from config.variants[@openmp].flags
##      +CXXFLAGS: $OPENMP_FLAG
##      +LDFLAGS:  $OPENMP_FLAG
        if '+openmp' in self.spec:
            cxxflags += ' ' + '-DHYPRE_USING_OPENMP'
            cxxflags += ' ' + self.compiler.openmp_flag
            ldflags  += ' ' + self.compiler.openmp_flag
        
## from config.variants[@mpi].languages
##    languages: [ mpicxx ]
        if '+mpi' in self.spec:
            languages = 'CC = {}'.format(self.spec['mpi'].mpicc)
        
## from config.variants[@mpi].flags
##    flags: +CXXFLAGS: "-DUSE_MPI=1"
        if '+mpi' in self.spec:
            cxxflags += ' ' + '-DUSE_MPI=1'

## from config.variants[@mpi].env
##      - "-DUSE_MPI=1"
##      - "MPI_INC = $MPI_INC"
##      - "MPI_LIB = $MPI_LIB"
        if '+mpi' in self.spec:
            targets.append('MPI_INC = {0}'.format(self.spec['mpi'].prefix.include))
            targets.append('MPI_LIB = {0}'.format(self.spec['mpi'].prefix.lib))

# boilerplate closing 'build_targets'
        targets.append(languages)
        targets.append('INCLUDE_CFLAGS = {0}'.format(cxxflags))
        targets.append('INCLUDE_LFLAGS = {0}'.format(ldflags))
        return targets

# from build.install
    def install(self, spec, prefix):
        mkdirp(prefix.bin)
        install('test/amg2006', prefix.bin)
        install('test/sstruct.in.AMG.FD', prefix.bin)





